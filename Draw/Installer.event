//#define INSTALL_BONUS_ANIMATIONS

// 17,144 non-compressed (410) 
// 730, 761 with default (31) 
// 844 with bonus anims (114)
// 

#include "Draw.lyn.event"
#include "EAstdlib.event"
#include "Extensions/ProcDefinitions.txt"
//This line should occur before this #include: #define INSTALL_BONUS_ANIMATIONS (if installing them)
#include "MapAnimations/Installer.event" 

ALIGN 4
SaveScreenNumbers:
#incbin "MapAnimations/Dmp/NumbersFromSaveScreen.dmp"

ALIGN 4
SaveScreenNumbersPal:
//#incbin "MapAnimations/Dmp/NumbersFromSaveScreen_pal.dmp" // same thing but only 32 bytes instead of 512 from png2dmp 
BYTE $0E $52 $C7 $14 $E4 $28 $26 $2D $A4 $1C $8A $3D $CC $41 $0E $4A $50 $52 $92 $56 $C7 $14 $FF $03 $7D $67 $D7 $52 $11 $3E $00 $00




#define Empty_AnimID 0 
#define Break1AnimID 1
#define Break2AnimID 2
#define CircleAnimID 3
#define Hit1AnimID 4
#define Hit2AnimID 5 // broken 
#define Impact1AnimID 6
#define Impact2AnimID 7
#define Shards1AnimID 8
#define Shards2AnimID 9
#define Splash1AnimID 10
#define Splash2AnimID 11
#define ThinSlashAnimID 12 
#define ThickSlashAnimID 13
#define FlashAnimID 14 
#define FreezeAnimID 15 
#define BoomerangAnimID 16
#define FeatherAnimID 17
#define CauterizeAnimID 18
#define FireballAnimID 19
#define HealAnimID 20
#define NumberOfAnimIDs 20

ALIGN 4
WeaponTypeAnimations:
BYTE 0 ThinSlashAnimID // Sword 
BYTE 1 Hit1AnimID // Lance 
BYTE 2 Shards2AnimID // Axe 
BYTE 3 Break1AnimID // Bow  
BYTE 5 Splash2AnimID // Anima 
BYTE 6 FlashAnimID // Light 
BYTE 7 Impact1AnimID // Dark 
BYTE $B Shards1AnimID // Monster 
BYTE $11 Shards1AnimID // Dragonstone 
BYTE 0 0 0 0; ALIGN 4 // Terminator 


#ifndef SilverSword 
	#define SilverSword 4 
#endif 

ALIGN 4
SpecificWeaponAnimations:
BYTE SilverSword Shards1AnimID 

/*
BYTE Confusion FreezeAnimID
BYTE SandAttack Splash1AnimID
BYTE Magnitude Splash2AnimID
//BYTE Tackle Empty_AnimID
BYTE TakeDown Break1AnimID
BYTE Tackle Break2AnimID
BYTE SeismicToss CircleAnimID
BYTE Swift Hit1AnimID
BYTE QuickAttack Hit2AnimID
BYTE Gust Shards1AnimID
BYTE PoisonPowder Shards2AnimID
BYTE Growl FlashAnimID
BYTE Leer FlashAnimID 
BYTE VineWhip ThinSlashAnimID
*/

BYTE 0 0 0 0; ALIGN 4 // Terminator 



#define AnimTable_Entry(ID, SpecificAnimationTable, PaletteAddr) "PUSH; ORG AnimTable2 + (ID*12); POIN SpecificAnimationTable PaletteAddr; SHORT 0 0; POP"

#define FillWithZeroes "WORD 0 0 0 0 0 0 0 0 0 0 0 0" // 4 entries 
#define FillTwentyEntries "FillWithZeroes; FillWithZeroes; FillWithZeroes; FillWithZeroes; FillWithZeroes"



ALIGN 4
AnimTable2:
WORD 0 0 0 // 0th animation is blank 
FillTwentyEntries 


AnimTable_Entry(ThinSlashAnimID,Slashing_A_Anim, SlashingData_pal)
AnimTable_Entry(Hit1AnimID,Hit1_Small_Anim, Hit1Data_pal)
AnimTable_Entry(Shards2AnimID,Shards2_Small_Anim, Shards2Data_pal)
AnimTable_Entry(Break1AnimID,Break1_Small_Anim, Break1Data_pal)
AnimTable_Entry(Splash2AnimID,Splash2_Small_Anim, Splash2Data_pal)
AnimTable_Entry(FlashAnimID,Flash_Anim, FlashData_pal)
AnimTable_Entry(Impact1AnimID,Impact1_Small_Anim, Impact1Data_pal)
AnimTable_Entry(Shards1AnimID,Shards1_Small_Anim, Shards1Data_pal)
#ifdef INSTALL_BONUS_ANIMATIONS 
AnimTable_Entry(Break2AnimID,Break2_Small_Anim, Break2Data_pal)
AnimTable_Entry(CircleAnimID,Circle_Small_Anim, CircleData_pal)
AnimTable_Entry(CauterizeAnimID,Cauterize_Anim, CauterizeData_pal) // small hit 2 was here 
AnimTable_Entry(Impact2AnimID,Impact2_Small_Anim, Impact2Data_pal)
AnimTable_Entry(Splash1AnimID,Splash1_Small_Anim, Splash1Data_pal)
AnimTable_Entry(ThickSlashAnimID,Slashing_B_Anim, SlashingData_pal) // same palete as Slashing_A
AnimTable_Entry(FreezeAnimID,Freeze_Anim, FreezeData_pal)
AnimTable_Entry(BoomerangAnimID,Boomerang_Anim, BoomerangData_pal)
AnimTable_Entry(FeatherAnimID,Feather_Anim, FeatherData_pal)
//AnimTable_Entry(HealAnimID,Heal_Anim, HealData_pal) // SFX 
//AnimTable_Entry(FireballAnimID,Fireball_Anim, FireballData_pal)
#endif 


#define VRAM_Address 0x6013300
ALIGN 4
VRAM_Address_Link:
WORD VRAM_Address 

#define MinimumFrames 28 
// Vanilla's default is 28 frames here. 
ALIGN 4
MinimumFramesLink:
WORD MinimumFrames 



PUSH
ORG $81274 // Poin to the vanilla proc 
POIN gProc_MapAnimRound_Animation
POP 



ALIGN 4
DrawSpriteProc:
PROC_YIELD 
PROC_SET_NAME(ASMC_DrawProcName)
PROC_CALL_ROUTINE(Draw_StoreToBuffer)
PROC_SLEEP(2)
PROC_LOOP_ROUTINE(Draw_PushToOam)
PROC_CALL_ROUTINE(Draw_Cleanup) 
PROC_END

ASMC_DrawProcName:
String("PausesStuffWhileAnimationIsGoing") ; BYTE 0
ALIGN 4


// gProc_MapAnimDefaultRound at 9A4764
// Copied the vanilla proc with our own routine added 
ALIGN 4
gProc_MapAnimRound_Animation:
PROC_YIELD 
PROC_SET_NAME(gProc_MapAnimRound_AnimationName)
PROC_CALL_ROUTINE($80813F9) // Begin Rounds Animation 
PROC_CALL_ROUTINE($80814D5) // Move towards target 
PROC_SLEEP(1)
PROC_CALL_ROUTINE($80814D5)
PROC_SLEEP(1)
PROC_CALL_ROUTINE($80814D5)
PROC_SLEEP(1)
PROC_CALL_ROUTINE($80814D5)
PROC_SLEEP(1)

PROC_CALL_ROUTINE($80815C1) // Camera Onto Target 
PROC_SLEEP(2)
PROC_CALL_ROUTINE($808161D) // Specific vanilla animations 

PROC_CALL_ROUTINE(Draw_SetupMemorySlots)

PROC_NEW_CHILD(DrawSpriteProc)
PROC_YIELD
//PROC_LOOP_ROUTINE($8081915) // Wait for HP to end changing 
PROC_CALL_ROUTINE($8081535) // Move away 
PROC_SLEEP(1)
PROC_CALL_ROUTINE($8081535) // Move away 
PROC_SLEEP(1)
PROC_CALL_ROUTINE($8081535) // Move away 
PROC_SLEEP(1)
PROC_CALL_ROUTINE($8081535) // Move away 
PROC_LOOP_ROUTINE(Draw_WaitXFrames)

PROC_END


gProc_MapAnimRound_AnimationName:
String("gProc_MapAnimRound_Animation_Repointed") ; BYTE 0
ALIGN 4

